<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"> 
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>cse674 - advanced data strucures</title>
  <link href="/css/styles.css" rel="stylesheet" type="text/css"></link>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"></meta>
  <link rel="shortcut icon" href="/cse382/img/favicon2.ico" />
  </head>
  <body>
    <div class="page_block1">
      <div class="page_block2">
        <div class="section">
          <h1>13: graphs #2</h1>
          Cycle Detection | Minimum Spanning Trees | Connectivity | Topological Sort<br />
        </div>
        <div class="section">
        <h2>Cycle Detection</h2>
        To use the WFIAlgorithm to detect cycles, it takes O(|V|^3) time.
        <h3>Undirected Graphs</h3>
        A simple modification to depth-first search can be
        done for undirected graphs that takes O(|V| + |E|) time.
        <div class="algorithm">
        <div class="code_grey">1:&nbsp;&nbsp;</div><div class="code_green">bool</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">cycleDetect(</div><div class="code_nothing">IVertex&nbsp;</div><div class="code_nothing">*&nbsp;</div><div class="code_nothing">v)</div><div class="code_nothing"></div><br /><div class="code_grey">2:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">vector&lt;</div><div class="code_nothing">IVertex&nbsp;</div><div class="code_nothing">*&gt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">path;</div><div class="code_nothing"></div><br /><div class="code_grey">3:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">set&lt;</div><div class="code_nothing">IVertex&nbsp;</div><div class="code_nothing">*&gt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">visited;</div><div class="code_nothing"></div><br /><div class="code_grey">4:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">add&nbsp;</div><div class="code_nothing">v&nbsp;</div><div class="code_nothing">to&nbsp;</div><div class="code_nothing">path;</div><div class="code_nothing"></div><br /><div class="code_grey">5:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">add&nbsp;</div><div class="code_nothing">v&nbsp;</div><div class="code_nothing">to&nbsp;</div><div class="code_nothing">visited;</div><div class="code_nothing"></div><br /><div class="code_grey">6:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">return</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">doCycleDetect(</div><div class="code_nothing">v,&nbsp;</div><div class="code_nothing">path,&nbsp;</div><div class="code_nothing">visited)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">7:&nbsp;&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">8:&nbsp;&nbsp;</div><div class="code_green">bool</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">doCycleDetect(</div><div class="code_nothing">IVertex&nbsp;</div><div class="code_nothing">*&nbsp;</div><div class="code_nothing">v,&nbsp;</div><div class="code_nothing">vector&lt;</div><div class="code_nothing">IVertex&nbsp;</div><div class="code_nothing">*&gt;</div><div class="code_nothing">&amp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">path,&nbsp;</div><div class="code_nothing">set&lt;</div><div class="code_nothing">IVertex&nbsp;</div><div class="code_nothing">*&gt;</div><div class="code_nothing">&amp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">visited)</div><div class="code_nothing"></div><br /><div class="code_grey">9:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">foreach(</div><div class="code_nothing">edge&nbsp;</div><div class="code_nothing">'e'&nbsp;</div><div class="code_nothing">in&nbsp;</div><div class="code_nothing">v->getEdges)</div><div class="code_nothing"></div><br /><div class="code_grey">10:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">IVertex&nbsp;</div><div class="code_nothing">*&nbsp;</div><div class="code_nothing">target&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">e->getTarget(</div><div class="code_nothing">)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">11:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">if</div><div class="code_nothing">(</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">last&nbsp;</div><div class="code_nothing">element&nbsp;</div><div class="code_nothing">in&nbsp;</div><div class="code_nothing">path&nbsp;</div><div class="code_nothing">==&nbsp;</div><div class="code_nothing">target)</div><div class="code_nothing"></div><br /><div class="code_grey">12:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">continue;</div><div class="code_nothing"></div><br /><div class="code_grey">13:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">if</div><div class="code_nothing">(</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">visited&nbsp;</div><div class="code_nothing">contains&nbsp;</div><div class="code_nothing">target&nbsp;</div><div class="code_nothing">)</div><div class="code_nothing"></div><br /><div class="code_grey">14:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">return</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">true;</div><div class="code_nothing"></div><br /><div class="code_grey">15:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">add&nbsp;</div><div class="code_nothing">v&nbsp;</div><div class="code_nothing">to&nbsp;</div><div class="code_nothing">path;</div><div class="code_nothing"></div><br /><div class="code_grey">16:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">add&nbsp;</div><div class="code_nothing">target&nbsp;</div><div class="code_nothing">to&nbsp;</div><div class="code_nothing">visited;</div><div class="code_nothing"></div><br /><div class="code_grey">17:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">if</div><div class="code_nothing">(</div><div class="code_nothing">doCycleDetect(</div><div class="code_nothing">target,&nbsp;</div><div class="code_nothing">path,&nbsp;</div><div class="code_nothing">visited)</div><div class="code_nothing">)</div><div class="code_nothing"></div><br /><div class="code_grey">18:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">return</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">true;</div><div class="code_nothing"></div><br /><div class="code_grey">19:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">else</div><div class="code_nothing"></div><br /><div class="code_grey">20:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">path.pop_back(</div><div class="code_nothing">)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">21:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">return</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">false;</div><div class="code_nothing"></div><br />        </div>
        <img src="/ads/img/pict/CycleDetectionGraph_0.bmp" alt="CycleDetectionGraph" /><br />
        Cycles: [acfa], [acfda], [dbed]<br />
        <br />
        <h3>Directed graph cycle detection</h3>
        In directed graphs, there may be edges between different spanning sub-trees, called side-edges. A back-edge only indicates a cycle if it joins two vertices already included in the same spanning tree.
        <ul>
          <li>To handle this case we check to see if num(u) is infinity and set num(v) to infinity after leaving the recursion of the current spanning tree.</li>
        </ul>
        <div class="algorithm">
        <div class="code_grey">1:&nbsp;</div><div class="code_red">algorithm</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">digraphCycleDetectionDFS(</div><div class="code_nothing"><i>vertex</i>&nbsp;</div><div class="code_nothing">v)</div><div class="code_nothing"></div><br /><div class="code_grey">2:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"><i>num</i>(</div><div class="code_nothing">v)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">i++;</div><div class="code_nothing"></div><br /><div class="code_grey">3:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">for</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"><i>all&nbsp;</div><div class="code_nothing">vertices</i>&nbsp;</div><div class="code_nothing">u&nbsp;</div><div class="code_nothing"><i>adjacent&nbsp;</div><div class="code_nothing">to</i>&nbsp;</div><div class="code_nothing">v</div><br /><div class="code_grey">4:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">if</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"><i>num</i>(</div><div class="code_nothing">u)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"><i>is</i>&nbsp;</div><div class="code_nothing">0</div><br /><div class="code_grey">5:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">digraphCycleDetectionDFS(</div><div class="code_nothing">u)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">6:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">else</div><div class="code_nothing">&nbsp;</div><div class="code_red">if</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"><i>num</i>(</div><div class="code_nothing">u)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"><i>is&nbsp;</div><div class="code_nothing">not</i>&nbsp;</div><div class="code_nothing">infinity</div><br /><div class="code_grey">7:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"><i>cycle&nbsp;</div><div class="code_nothing">detected</i>;</div><div class="code_nothing"></div><br /><div class="code_grey">8:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"><i>num</i>(</div><div class="code_nothing">v)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">infinity;</div><div class="code_nothing"></div><br />        </div>
        <img src="/ads/img/pict/CycleDetectionGraph_1.bmp" alt="CycleDetectionGraph" /><br />
        Cycles: [abca], [abcda]<br />
        </div>
        <div class="section">
        <h2>Spanning Trees</h2>
        A spanning tree (or forest, set of trees) is a tree that includes all the vertices of an original graph, but not necessarily all the edges.<br />
        <ol>
          <li>Original Graph<br />
            <img src="/ads/img/pict/SpanningTree_0.bmp" alt="SpanningTree" />
          </li>
          <li>Spanning Tree Built From Breadth-First Search<br />
            <img src="/ads/img/pict/SpanningTree_1.bmp" alt="SpanningTree" />
          </li>
        </ol>
        <br />
        The edges in a spanning tree are forward edges in the original graph.
        </div>
        <div class="section">
        <h2>Minimum Spanning Trees</h2>
        <ul>
          <li>Consider a graph representing airline connections between cities</li>
          <li>If the airline needs to save money and shut down as many connections as possible, can it be done in a way that it is still possible to reach any city from any other city?</li>
        </ul>
        A minimum spanning tree is a spanning tree in which the sum of the weights is minimized.
        <div class="algorithm">
        <div class="code_grey">1:&nbsp;</div><div class="code_red">algorithm</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">kruskalAlgorithm(</div><div class="code_nothing"><i>weight&nbsp;</div><div class="code_nothing">connected&nbsp;</div><div class="code_nothing">undirected</i>&nbsp;</div><div class="code_nothing">graph)</div><div class="code_nothing"></div><br /><div class="code_grey">2:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">tree&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing"><i>null</i>;</div><div class="code_nothing"></div><br /><div class="code_grey">3:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">edges&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing"><i>sequence&nbsp;</div><div class="code_nothing">of&nbsp;</div><div class="code_nothing">all&nbsp;</div><div class="code_nothing">edges&nbsp;</div><div class="code_nothing">of</i>&nbsp;</div><div class="code_nothing">graph&nbsp;</div><div class="code_nothing"><i>sorted&nbsp;</div><div class="code_nothing">by&nbsp;</div><div class="code_nothing">weight</i>;</div><div class="code_nothing"></div><br /><div class="code_grey">4:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">for</div><div class="code_nothing">(</div><div class="code_nothing">i&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">1;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">i&nbsp;</div><div class="code_nothing"><=&nbsp;</div><div class="code_nothing">|E|&nbsp;</div><div class="code_nothing"><i>and</i>&nbsp;</div><div class="code_nothing">|tree|&nbsp;</div><div class="code_nothing"><&nbsp;</div><div class="code_nothing">|V|&nbsp;</div><div class="code_nothing">-&nbsp;</div><div class="code_nothing">1;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">++i)</div><div class="code_nothing"></div><br /><div class="code_grey">5:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">if</div><div class="code_nothing">(</div><div class="code_nothing">e_i&nbsp;</div><div class="code_nothing"><i>from</i>&nbsp;</div><div class="code_nothing">edges&nbsp;</div><div class="code_nothing"><i>does&nbsp;</div><div class="code_nothing">not&nbsp;</div><div class="code_nothing">form&nbsp;</div><div class="code_nothing">a&nbsp;</div><div class="code_nothing">cycle&nbsp;</div><div class="code_nothing">with&nbsp;</div><div class="code_nothing">edges&nbsp;</div><div class="code_nothing">in</i>&nbsp;</div><div class="code_nothing">tree</div><br /><div class="code_grey">6:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"><i>add</i>&nbsp;</div><div class="code_nothing">e_i&nbsp;</div><div class="code_nothing"><i>to</i>&nbsp;</div><div class="code_nothing">tree;</div><div class="code_nothing"></div><br />        </div>
        <ol>
          <li>Start Graph: <br />
            <img src="/ads/img/pict/MinimumSpanningTree_0.bmp" alt="MinimumSpanningTree" />
          </li>
          <li>Add the smallest weighted edge to the tree: <br />
            <img src="/ads/img/pict/MinimumSpanningTree_1.bmp" alt="MinimumSpanningTree" />
          </li>
          <li>Add the next smallest weighted edge to the tree: <br />
            <img src="/ads/img/pict/MinimumSpanningTree_2.bmp" alt="MinimumSpanningTree" />
          </li>
          <li>Add the 3rd smallest weighted edge to the tree: <br />
            <img src="/ads/img/pict/MinimumSpanningTree_3.bmp" alt="MinimumSpanningTree" />
          </li>
          <li>Add the 4th smallest weighted edge to the tree: <br />
            <img src="/ads/img/pict/MinimumSpanningTree_4.bmp" alt="MinimumSpanningTree" />
          </li>
          <li>Add the 5th smallest weighted edge to the tree.<br />
            <img src="/ads/img/pict/MinimumSpanningTree_5.bmp" alt="MinimumSpanningTree" />
          </li>
          <li>Add the 7th smallest weighted edge to the tree. (The 6th formed a cycle). All other edges form a cycle so we are done.<br />
            <img src="/ads/img/pict/MinimumSpanningTree_6.bmp" alt="MinimumSpanningTree" />
          </li>
        </ol>
        The time complexity of Kruskal's Algorithm is dependent on
        <ul>
          <li>The sorting method used: O(|E|lg|E|)</li>
          <li>The for loop: O((|V|-1)|V|) = O(|V|^2)</li>
          <li>The max number of edges in a graph is |V|^2, so the time complexity is O(|E|lg|E|)</li>
        </ul>
        <h2>Dijkstra's Method for Spanning Trees</h2>
        Kruskal's Algorithm requires all edges are ordered. Dijkstra's Method for Spanning Trees does not.
        <div class="algorithm">
        <div class="code_grey">1:&nbsp;</div><div class="code_red">algorithm</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">dijkstraSpanningTree(</div><div class="code_nothing"><i>weight&nbsp;</div><div class="code_nothing">connected&nbsp;</div><div class="code_nothing">undirected</i>&nbsp;</div><div class="code_nothing">graph)</div><div class="code_nothing"></div><br /><div class="code_grey">2:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">tree&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing"><i>null</i>;</div><div class="code_nothing"></div><br /><div class="code_grey">3:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">edges&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing"><i>an&nbsp;</div><div class="code_nothing">unsorted&nbsp;</div><div class="code_nothing">sequence&nbsp;</div><div class="code_nothing">of&nbsp;</div><div class="code_nothing">all&nbsp;</div><div class="code_nothing">edges&nbsp;</div><div class="code_nothing">of</i>&nbsp;</div><div class="code_nothing">graph;</div><div class="code_nothing"></div><br /><div class="code_grey">4:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">for</div><div class="code_nothing">(</div><div class="code_nothing">j&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">1&nbsp;</div><div class="code_nothing">to&nbsp;</div><div class="code_nothing">|E|)</div><div class="code_nothing"></div><br /><div class="code_grey">5:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"><i>add</i>&nbsp;</div><div class="code_nothing">e_j&nbsp;</div><div class="code_nothing"><i>to</i>&nbsp;</div><div class="code_nothing">tree;</div><div class="code_nothing"></div><br /><div class="code_grey">6:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">if</div><div class="code_nothing">(</div><div class="code_nothing"><i>there&nbsp;</div><div class="code_nothing">is&nbsp;</div><div class="code_nothing">a&nbsp;</div><div class="code_nothing">cycle&nbsp;</div><div class="code_nothing">in</i>&nbsp;</div><div class="code_nothing">tree)</div><div class="code_nothing"></div><br /><div class="code_grey">7:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"><i>remove&nbsp;</div><div class="code_nothing">an&nbsp;</div><div class="code_nothing">edge&nbsp;</div><div class="code_nothing">with&nbsp;</div><div class="code_nothing">maximum&nbsp;</div><div class="code_nothing">weight&nbsp;</div><div class="code_nothing">from&nbsp;</div><div class="code_nothing">this&nbsp;</div><div class="code_nothing">only&nbsp;</div><div class="code_nothing">cycle</i>;</div><div class="code_nothing"></div><br />        </div>
        <ol>
          <li>Start Graph: <br />
            <img src="/ads/img/pict/MinimumSpanningTree_0.bmp" alt="MinimumSpanningTree" />
          </li>
          <li>Add a random edge: <br />
            <img src="/ads/img/pict/MinimumSpanningTree_7.bmp" alt="MinimumSpanningTree" />
          </li>
          <li>Add a random edge: <br />
            <img src="/ads/img/pict/MinimumSpanningTree_8.bmp" alt="MinimumSpanningTree" />
          </li>
          <li>Add a random edge: <br />
            <img src="/ads/img/pict/MinimumSpanningTree_9.bmp" alt="MinimumSpanningTree" />
          </li>
          <li>Add a random edge: <br />
            <img src="/ads/img/pict/MinimumSpanningTree_10.bmp" alt="MinimumSpanningTree" />
          </li>
          <li>Add a random edge: <br />
            <img src="/ads/img/pict/MinimumSpanningTree_11.bmp" alt="MinimumSpanningTree" />
          </li>
          <li>Add a random edge: <br />
            <img src="/ads/img/pict/MinimumSpanningTree_12.bmp" alt="MinimumSpanningTree" />
          </li>
          <li>There is a cycle, remove the largest weighted edge <br />
            <img src="/ads/img/pict/MinimumSpanningTree_13.bmp" alt="MinimumSpanningTree" />
          </li>
          <li>Add a random edge: <br />
            <img src="/ads/img/pict/MinimumSpanningTree_14.bmp" alt="MinimumSpanningTree" />
          </li>
          <li>There is a cycle, remove the largest weighted edge (the one we just added)<br />
            <img src="/ads/img/pict/MinimumSpanningTree_15.bmp" alt="MinimumSpanningTree" />
          </li>
          <li>Add a random edge: <br />
            <img src="/ads/img/pict/MinimumSpanningTree_16.bmp" alt="MinimumSpanningTree" />
          </li>
          <li>Add a random edge: <br />
            <img src="/ads/img/pict/MinimumSpanningTree_17.bmp" alt="MinimumSpanningTree" />
          </li>
          <li>There is a cycle, remove the largest weighted edge. Done<br />
            <img src="/ads/img/pict/MinimumSpanningTree_18.bmp" alt="MinimumSpanningTree" />
          </li>
        </ol>
        Time complexity: O(|E||V|).
        <ul>
          <li>The for loop executes |E| times</li>
          <li>Each time checking for a cycle takes |V| time</li>
        </ul>
        </div>
        <div class="section">
        <h2>Connectivity in Undirected Graphs</h2>
        <ul>
          <li>An undirected graph is called <i>connected</i> if there is a path between any two vertices</li>
          <li>A graph is <i>n-connected</i> if there are at least n different paths between its vertices</li>
          <li>A <i>2-connected</i> or <i>biconnected</i> graph has at least two paths between each vertex</li>
          <li>A graph is not biconnected if you can find an edge that is required between the path of two vertices</li>
          <li>If that edge edge is removed, the graph is split into two.</li>
          <li>The vertices joined by this edge are called articulation points or cut-vertices</li>
          <li>The edge is called a bridge or cut-edge</li>
        </ul>
        Connected subgraphs with no articulation points or bridges are called blocks (or biconnected components when there are at least two vertices).
        <div class="algorithm">
        <div class="code_grey">1:&nbsp;&nbsp;</div><div class="code_red">algorithm</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">blockSearch(</div><div class="code_nothing">)</div><div class="code_nothing"></div><br /><div class="code_grey">2:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">for</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"><i>all&nbsp;</div><div class="code_nothing">vertices</i>&nbsp;</div><div class="code_nothing">v</div><br /><div class="code_grey">3:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"><i>num</i>(</div><div class="code_nothing">v)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">0;</div><div class="code_nothing"></div><br /><div class="code_grey">4:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">i&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">1;</div><div class="code_nothing"></div><br /><div class="code_grey">5:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">while</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"><i>there&nbsp;</div><div class="code_nothing">is&nbsp;</div><div class="code_nothing">a&nbsp;</div><div class="code_nothing">vertex</i>&nbsp;</div><div class="code_nothing">v&nbsp;</div><div class="code_nothing"><i>such&nbsp;</div><div class="code_nothing">that&nbsp;</div><div class="code_nothing">num</i>(</div><div class="code_nothing">v)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">==&nbsp;</div><div class="code_nothing">0</div><br /><div class="code_grey">6:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">blockDFS(</div><div class="code_nothing">v,&nbsp;</div><div class="code_nothing">NULL)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">7:&nbsp;&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">8:&nbsp;&nbsp;</div><div class="code_red">algorithm</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">blockDFS(</div><div class="code_nothing"><i>vertex</i>&nbsp;</div><div class="code_nothing">v,&nbsp;</div><div class="code_nothing"><i>vertex</i>&nbsp;</div><div class="code_nothing">parent_v)</div><div class="code_nothing"></div><br /><div class="code_grey">9:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"><i>pred</i>(</div><div class="code_nothing">v)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing"><i>num</i>(</div><div class="code_nothing">v)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">i++;</div><div class="code_nothing"></div><br /><div class="code_grey">10:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">for</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"><i>all&nbsp;</div><div class="code_nothing">vertices</i>&nbsp;</div><div class="code_nothing">u&nbsp;</div><div class="code_nothing"><i>adjacent&nbsp;</div><div class="code_nothing">to</i>&nbsp;</div><div class="code_nothing">v</div><br /><div class="code_grey">11:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">if</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"><i>edge</i>(</div><div class="code_nothing">uv)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"><i>has&nbsp;</div><div class="code_nothing">not&nbsp;</div><div class="code_nothing">been&nbsp;</div><div class="code_nothing">processed</i></div><br /><div class="code_grey">12:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"><i>push</i>(</div><div class="code_nothing"><i>edge</i>(</div><div class="code_nothing">uv)</div><div class="code_nothing">)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">13:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">if</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"><i>num</i>(</div><div class="code_nothing">u)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"><i>is</i>&nbsp;</div><div class="code_nothing">0</div><br /><div class="code_grey">14:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">blockDFS(</div><div class="code_nothing">u,&nbsp;</div><div class="code_nothing">v)</div><div class="code_nothing"></div><br /><div class="code_grey">15:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">if</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"><i>pred</i>(</div><div class="code_nothing">u)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&gt;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing"><i>num</i>(</div><div class="code_nothing">v)</div><div class="code_nothing"></div><br /><div class="code_grey">16:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">e&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing"><i>pop</i>(</div><div class="code_nothing">)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">17:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">while</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">e&nbsp;</div><div class="code_nothing">!=&nbsp;</div><div class="code_nothing"><i>edge</i>(</div><div class="code_nothing">vu)</div><div class="code_nothing"></div><br /><div class="code_grey">18:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"><i>output</i>&nbsp;</div><div class="code_nothing">e;</div><div class="code_nothing"></div><br /><div class="code_grey">19:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">e&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing"><i>pop</i>(</div><div class="code_nothing">)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">20:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"><i>output</i>&nbsp;</div><div class="code_nothing">e;</div><div class="code_nothing"></div><br /><div class="code_grey">21:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">else</div><div class="code_nothing"></div><br /><div class="code_grey">22:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"><i>pred</i>(</div><div class="code_nothing">v)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing"><i>min</i>(</div><div class="code_nothing"><i>pred</i>(</div><div class="code_nothing">v)</div><div class="code_nothing">,&nbsp;</div><div class="code_nothing"><i>pred</i>(</div><div class="code_nothing">u)</div><div class="code_nothing">)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">23:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">else</div><div class="code_nothing">&nbsp;</div><div class="code_red">if</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">u&nbsp;</div><div class="code_nothing"><i>is&nbsp;</div><div class="code_nothing">not</i>&nbsp;</div><div class="code_nothing">parent_v</div><br /><div class="code_grey">24:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"><i>pred</i>(</div><div class="code_nothing">v)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing"><i>min</i>(</div><div class="code_nothing"><i>pred</i>(</div><div class="code_nothing">v)</div><div class="code_nothing">,&nbsp;</div><div class="code_nothing"><i>num</i>(</div><div class="code_nothing">u)</div><div class="code_nothing">)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"></div><br />        </div>
        Time complexity of blockSearch: O(|V| + |E|)<br />
        <br />
        <img src="/ads/img/pict/BlockDFS_0.bmp" alt="BlockDFS" /><br />
        <br />
        <ol>
          <li>Start:<br />
            <img src="/ads/img/pict/BlockDFS_1.bmp" alt="BlockDFS" />
          </li>
          <li>Lines 9 - 14. Visiting edge (a, c)<br />
            <img src="/ads/img/pict/BlockDFS_2.bmp" alt="BlockDFS" />
          </li>
          <li>Recurse, Lines 9 - 14. Visiting edge (c, a)->visited, Visiting edge (c, f).<br />
            <img src="/ads/img/pict/BlockDFS_3.bmp" alt="BlockDFS" />
          </li>
          <li>Recurse, Lines 9 - 13. Visiting edge (f, a). Num(a) != 0.<br />
            <img src="/ads/img/pict/BlockDFS_4.bmp" alt="BlockDFS" />
          </li>
          <li>Lines 23 - 24. u != parent. pred(f) = num(a)<br />
            <img src="/ads/img/pict/BlockDFS_5.bmp" alt="BlockDFS" />
          </li>
          <li>Line 9 - 14. Visiting edge (f, c)->visited, Visiting edge (f, d). Recurse<br />
            <img src="/ads/img/pict/BlockDFS_6.bmp" alt="BlockDFS" />
          </li>
          <li>Line 9 - 24. Visiting edge (d, a). Add edge to stack. u != parent, pred(d)=num(a)<br />
            <img src="/ads/img/pict/BlockDFS_7.bmp" alt="BlockDFS" />
          </li>
          <li>Line 9 - 14. Visiting edge (d, f)->visited. Visiting edge (d, b). Add edge to stack. Recurse<br />
            <img src="/ads/img/pict/BlockDFS_8.bmp" alt="BlockDFS" />
          </li>
          <li>Line 9 - 14. Visiting edge (b, d)->visited. Visiting edge (b, e). Add edge to stack. Recurse<br />
            <img src="/ads/img/pict/BlockDFS_9.bmp" alt="BlockDFS" />
          </li>
          <li>Line 9 - 24. Visiting edge (e, d). Add Edge to stack, u != parent, pred(e) = num(d)<br />
            <img src="/ads/img/pict/BlockDFS_10.bmp" alt="BlockDFS" />
          </li>
          <li>Last edge: (e, b) is visited. Returning from recursion, twice.<br />
            <img src="/ads/img/pict/BlockDFS_11.bmp" alt="BlockDFS" />
          </li>
          <li>Sitting at edge (d, b). Block Found: [d, e, b].<br />
            <img src="/ads/img/pict/BlockDFS_12.bmp" alt="BlockDFS" />
          </li>
          <li>Visiting edge (d, e)->visited. pred(d) = pred(d). Returning from recursion three times<br />
            <img src="/ads/img/pict/BlockDFS_12.bmp" alt="BlockDFS" />
          </li>
          <li>Block Found: [a, d, f, c]. Done<br />
            <img src="/ads/img/pict/BlockDFS_13.bmp" alt="BlockDFS" />
          </li>
        </ol>
        <h2>Connectivity in Directed Graphs - Strong Components</h2>
        <div class="algorithm">
        <div class="code_grey">1:&nbsp;&nbsp;</div><div class="code_red">algorithm</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">strongDFS(</div><div class="code_nothing">vertex&nbsp;</div><div class="code_nothing">v)</div><div class="code_nothing"></div><br /><div class="code_grey">2:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">pred(</div><div class="code_nothing">v)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">v)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">i++;</div><div class="code_nothing"></div><br /><div class="code_grey">3:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">push(</div><div class="code_nothing">v)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">4:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">for</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">all&nbsp;</div><div class="code_nothing">vertices&nbsp;</div><div class="code_nothing">u&nbsp;</div><div class="code_nothing">adjacent&nbsp;</div><div class="code_nothing">to&nbsp;</div><div class="code_nothing">v</div><br /><div class="code_grey">5:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">if</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">u)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">is&nbsp;</div><div class="code_nothing">0</div><br /><div class="code_grey">6:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">strongDFS(</div><div class="code_nothing">u)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">7:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">pred(</div><div class="code_nothing">v)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">min(</div><div class="code_nothing">pred(</div><div class="code_nothing">v)</div><div class="code_nothing">,&nbsp;</div><div class="code_nothing">pred(</div><div class="code_nothing">u)</div><div class="code_nothing">)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">8:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">else</div><div class="code_nothing">&nbsp;</div><div class="code_red">if</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">u)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">v)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">and&nbsp;</div><div class="code_nothing">u&nbsp;</div><div class="code_nothing">is&nbsp;</div><div class="code_nothing">on&nbsp;</div><div class="code_nothing">stack</div><br /><div class="code_grey">9:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">pred(</div><div class="code_nothing">v)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">min(</div><div class="code_nothing">pred(</div><div class="code_nothing">v)</div><div class="code_nothing">,&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">u)</div><div class="code_nothing">)</div><div class="code_nothing"></div><br /><div class="code_grey">10:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">if</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">pred(</div><div class="code_nothing">v)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">==&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">v)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">11:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">w&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">pop(</div><div class="code_nothing">)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">12:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">while</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">w&nbsp;</div><div class="code_nothing">!=&nbsp;</div><div class="code_nothing">v</div><br /><div class="code_grey">13:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">output&nbsp;</div><div class="code_nothing">w;</div><div class="code_nothing"></div><br /><div class="code_grey">14:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">w&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">pop(</div><div class="code_nothing">)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">15:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">output&nbsp;</div><div class="code_nothing">w;</div><div class="code_nothing"></div><br /><div class="code_grey">16:&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">17:&nbsp;</div><div class="code_red">algorithm</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">strongSearch(</div><div class="code_nothing">)</div><div class="code_nothing"></div><br /><div class="code_grey">18:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">for</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">all&nbsp;</div><div class="code_nothing">vertices&nbsp;</div><div class="code_nothing">v</div><br /><div class="code_grey">19:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">v)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">0;</div><div class="code_nothing"></div><br /><div class="code_grey">20:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">i&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">1;</div><div class="code_nothing"></div><br /><div class="code_grey">21:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">while</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">there&nbsp;</div><div class="code_nothing">is&nbsp;</div><div class="code_nothing">a&nbsp;</div><div class="code_nothing">vertex&nbsp;</div><div class="code_nothing">v&nbsp;</div><div class="code_nothing">such&nbsp;</div><div class="code_nothing">that&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">v)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">==&nbsp;</div><div class="code_nothing">0</div><br /><div class="code_grey">22:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">strongDFS(</div><div class="code_nothing">v)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br />        </div>
        <img src="/ads/img/pict/StrongDFS_0.bmp" alt="StrongDFS" />
        <div class="algorithm">
        <div class="code_grey">1:&nbsp;&nbsp;</div><div class="code_nothing">Executing&nbsp;</div><div class="code_nothing">strongDFS&nbsp;</div><div class="code_nothing">on:</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">v1</div><br /><div class="code_grey">2:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">pred(</div><div class="code_nothing">v1)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">==&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">v1)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">1</div><br /><div class="code_grey">3:&nbsp;&nbsp;</div><div class="code_nothing">Executing&nbsp;</div><div class="code_nothing">strongDFS&nbsp;</div><div class="code_nothing">on:</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">v4</div><br /><div class="code_grey">4:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">pred(</div><div class="code_nothing">v4)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">==&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">v4)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">2</div><br /><div class="code_grey">5:&nbsp;&nbsp;</div><div class="code_nothing">pred(</div><div class="code_nothing">v4)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">==&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">v4)</div><div class="code_nothing"></div><br /><div class="code_grey">6:&nbsp;&nbsp;</div><div class="code_nothing">Strong&nbsp;</div><div class="code_nothing">Component:</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">7:&nbsp;&nbsp;</div><div class="code_nothing">v4</div><br /><div class="code_grey">8:&nbsp;&nbsp;</div><div class="code_nothing">Returing&nbsp;</div><div class="code_nothing">from&nbsp;</div><div class="code_nothing">recursion&nbsp;</div><div class="code_nothing">on:</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">v4</div><br /><div class="code_grey">9:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">pred(</div><div class="code_nothing">v1)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">min(</div><div class="code_nothing">pred(</div><div class="code_nothing">v1)</div><div class="code_nothing">,&nbsp;</div><div class="code_nothing">pred(</div><div class="code_nothing">v4)</div><div class="code_nothing">)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">1</div><br /><div class="code_grey">10:&nbsp;</div><div class="code_nothing">Executing&nbsp;</div><div class="code_nothing">strongDFS&nbsp;</div><div class="code_nothing">on:</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">v7</div><br /><div class="code_grey">11:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">pred(</div><div class="code_nothing">v7)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">==&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">v7)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">3</div><br /><div class="code_grey">12:&nbsp;</div><div class="code_nothing">Executing&nbsp;</div><div class="code_nothing">strongDFS&nbsp;</div><div class="code_nothing">on:</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">v3</div><br /><div class="code_grey">13:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">pred(</div><div class="code_nothing">v3)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">==&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">v3)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">4</div><br /><div class="code_grey">14:&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">v1)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">v3)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">and&nbsp;</div><div class="code_nothing">v1&nbsp;</div><div class="code_nothing">is&nbsp;</div><div class="code_nothing">on&nbsp;</div><div class="code_nothing">stack</div><br /><div class="code_grey">15:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">pred(</div><div class="code_nothing">v3)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">min(</div><div class="code_nothing">pred(</div><div class="code_nothing">v3)</div><div class="code_nothing">,&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">v1)</div><div class="code_nothing">)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">1</div><br /><div class="code_grey">16:&nbsp;</div><div class="code_nothing">Returing&nbsp;</div><div class="code_nothing">from&nbsp;</div><div class="code_nothing">recursion&nbsp;</div><div class="code_nothing">on:</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">v3</div><br /><div class="code_grey">17:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">pred(</div><div class="code_nothing">v7)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">min(</div><div class="code_nothing">pred(</div><div class="code_nothing">v7)</div><div class="code_nothing">,&nbsp;</div><div class="code_nothing">pred(</div><div class="code_nothing">v3)</div><div class="code_nothing">)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">1</div><br /><div class="code_grey">18:&nbsp;</div><div class="code_nothing">Returing&nbsp;</div><div class="code_nothing">from&nbsp;</div><div class="code_nothing">recursion&nbsp;</div><div class="code_nothing">on:</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">v7</div><br /><div class="code_grey">19:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">pred(</div><div class="code_nothing">v1)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">min(</div><div class="code_nothing">pred(</div><div class="code_nothing">v1)</div><div class="code_nothing">,&nbsp;</div><div class="code_nothing">pred(</div><div class="code_nothing">v7)</div><div class="code_nothing">)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">1</div><br /><div class="code_grey">20:&nbsp;</div><div class="code_nothing">pred(</div><div class="code_nothing">v1)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">==&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">v1)</div><div class="code_nothing"></div><br /><div class="code_grey">21:&nbsp;</div><div class="code_nothing">Strong&nbsp;</div><div class="code_nothing">Component:</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">22:&nbsp;</div><div class="code_nothing">v3</div><br /><div class="code_grey">23:&nbsp;</div><div class="code_nothing">v7</div><br /><div class="code_grey">24:&nbsp;</div><div class="code_nothing">v1</div><br /><div class="code_grey">25:&nbsp;</div><div class="code_nothing">Executing&nbsp;</div><div class="code_nothing">strongDFS&nbsp;</div><div class="code_nothing">on:</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">v2</div><br /><div class="code_grey">26:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">pred(</div><div class="code_nothing">v2)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">==&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">v2)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">5</div><br /><div class="code_grey">27:&nbsp;</div><div class="code_nothing">Executing&nbsp;</div><div class="code_nothing">strongDFS&nbsp;</div><div class="code_nothing">on:</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">v5</div><br /><div class="code_grey">28:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">pred(</div><div class="code_nothing">v5)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">==&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">v5)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">6</div><br /><div class="code_grey">29:&nbsp;</div><div class="code_nothing">Executing&nbsp;</div><div class="code_nothing">strongDFS&nbsp;</div><div class="code_nothing">on:</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">v6</div><br /><div class="code_grey">30:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">pred(</div><div class="code_nothing">v6)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">==&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">v6)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">7</div><br /><div class="code_grey">31:&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">v2)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">v6)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">and&nbsp;</div><div class="code_nothing">v2&nbsp;</div><div class="code_nothing">is&nbsp;</div><div class="code_nothing">on&nbsp;</div><div class="code_nothing">stack</div><br /><div class="code_grey">32:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">pred(</div><div class="code_nothing">v6)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">min(</div><div class="code_nothing">pred(</div><div class="code_nothing">v6)</div><div class="code_nothing">,&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">v2)</div><div class="code_nothing">)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">5</div><br /><div class="code_grey">33:&nbsp;</div><div class="code_nothing">Returing&nbsp;</div><div class="code_nothing">from&nbsp;</div><div class="code_nothing">recursion&nbsp;</div><div class="code_nothing">on:</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">v6</div><br /><div class="code_grey">34:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">pred(</div><div class="code_nothing">v5)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">min(</div><div class="code_nothing">pred(</div><div class="code_nothing">v5)</div><div class="code_nothing">,&nbsp;</div><div class="code_nothing">pred(</div><div class="code_nothing">v6)</div><div class="code_nothing">)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">5</div><br /><div class="code_grey">35:&nbsp;</div><div class="code_nothing">Returing&nbsp;</div><div class="code_nothing">from&nbsp;</div><div class="code_nothing">recursion&nbsp;</div><div class="code_nothing">on:</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">v5</div><br /><div class="code_grey">36:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">pred(</div><div class="code_nothing">v2)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">min(</div><div class="code_nothing">pred(</div><div class="code_nothing">v2)</div><div class="code_nothing">,&nbsp;</div><div class="code_nothing">pred(</div><div class="code_nothing">v5)</div><div class="code_nothing">)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">5</div><br /><div class="code_grey">37:&nbsp;</div><div class="code_nothing">pred(</div><div class="code_nothing">v2)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">==&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">v2)</div><div class="code_nothing"></div><br /><div class="code_grey">38:&nbsp;</div><div class="code_nothing">Strong&nbsp;</div><div class="code_nothing">Component:</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">39:&nbsp;</div><div class="code_nothing">v6</div><br /><div class="code_grey">40:&nbsp;</div><div class="code_nothing">v5</div><br /><div class="code_grey">41:&nbsp;</div><div class="code_nothing">v2</div><br />        </div>
        Time complexity of strongSearch: O(|V| + |E|)<br />
        <br />
        </div>
        <div class="section">
        <h2>Topological Sort</h2>
        Topological Sort can be used to find the build order in C++ programs. The first file that needs to be built is the file with no dependencies. Toplogical Sort must be done on a graph where strong components are compressed into single nodes.<br />
        <br />
        Summary algorithm: <br />
        <div class="algorithm">
        <div class="code_grey">1:&nbsp;</div><div class="code_red">algorithm</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">topologicalSort(</div><div class="code_nothing">digraph&nbsp;</div><div class="code_nothing">g)</div><div class="code_nothing"></div><br /><div class="code_grey">2:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">for</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">i&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">1&nbsp;</div><div class="code_nothing">to&nbsp;</div><div class="code_nothing">|V|</div><br /><div class="code_grey">3:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">find&nbsp;</div><div class="code_nothing">a&nbsp;</div><div class="code_nothing">minimal&nbsp;</div><div class="code_nothing">vertex&nbsp;</div><div class="code_nothing">v;</div><div class="code_nothing"></div><br /><div class="code_grey">4:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">v)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">i;</div><div class="code_nothing"></div><br /><div class="code_grey">5:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">remove&nbsp;</div><div class="code_nothing">from&nbsp;</div><div class="code_nothing">g&nbsp;</div><div class="code_nothing">vertex&nbsp;</div><div class="code_nothing">v&nbsp;</div><div class="code_nothing">and&nbsp;</div><div class="code_nothing">all&nbsp;</div><div class="code_nothing">edges&nbsp;</div><div class="code_nothing">incident&nbsp;</div><div class="code_nothing">with&nbsp;</div><div class="code_nothing">v;</div><div class="code_nothing"></div><br />        </div><br />
        Algorithm Based on DFS: <br />
        <div class="algorithm">
        <div class="code_grey">1:&nbsp;&nbsp;</div><div class="code_red">algorithm</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">TS(</div><div class="code_nothing">v)</div><div class="code_nothing"></div><br /><div class="code_grey">2:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">v)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">i++;</div><div class="code_nothing"></div><br /><div class="code_grey">3:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">for</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">all&nbsp;</div><div class="code_nothing">vertices&nbsp;</div><div class="code_nothing">u&nbsp;</div><div class="code_nothing">adjacent&nbsp;</div><div class="code_nothing">to&nbsp;</div><div class="code_nothing">v</div><br /><div class="code_grey">4:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">if</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">u)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">==&nbsp;</div><div class="code_nothing">0</div><br /><div class="code_grey">5:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">TS(</div><div class="code_nothing">u)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">6:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">else</div><div class="code_nothing">&nbsp;</div><div class="code_red">if</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">TSNum(</div><div class="code_nothing">u)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">==&nbsp;</div><div class="code_nothing">0;</div><div class="code_nothing"></div><br /><div class="code_grey">7:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">error&nbsp;</div><div class="code_nothing">a&nbsp;</div><div class="code_nothing">cycle&nbsp;</div><div class="code_nothing">was&nbsp;</div><div class="code_nothing">detected;</div><div class="code_nothing"></div><br /><div class="code_grey">8:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">TSNum(</div><div class="code_nothing">v)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">j++;</div><div class="code_nothing"></div><br /><div class="code_grey">9:&nbsp;&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">10:&nbsp;</div><div class="code_red">algorithm</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">topologicalSorting(</div><div class="code_nothing">digraph&nbsp;</div><div class="code_nothing">g)</div><div class="code_nothing"></div><br /><div class="code_grey">11:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">for</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">all&nbsp;</div><div class="code_nothing">vertices&nbsp;</div><div class="code_nothing">v</div><br /><div class="code_grey">12:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">v)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">TSNum(</div><div class="code_nothing">v)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">0;</div><div class="code_nothing"></div><br /><div class="code_grey">13:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">i&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">j&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">1;</div><div class="code_nothing"></div><br /><div class="code_grey">14:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">while</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">there&nbsp;</div><div class="code_nothing">is&nbsp;</div><div class="code_nothing">a&nbsp;</div><div class="code_nothing">vertex&nbsp;</div><div class="code_nothing">v&nbsp;</div><div class="code_nothing">such&nbsp;</div><div class="code_nothing">that&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">v)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">==&nbsp;</div><div class="code_nothing">0</div><br /><div class="code_grey">15:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">TS(</div><div class="code_nothing">v)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">16:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">output&nbsp;</div><div class="code_nothing">vertices&nbsp;</div><div class="code_nothing">according&nbsp;</div><div class="code_nothing">to&nbsp;</div><div class="code_nothing">their&nbsp;</div><div class="code_nothing">TSNum;</div><div class="code_nothing"></div><br />        </div>
        <img src="/ads/img/pict/TopoSortGraph_0.bmp" alt="TopoSortGraph" />
        <div class="algorithm">
        <div class="code_grey">1:&nbsp;&nbsp;</div><div class="code_nothing">in&nbsp;</div><div class="code_nothing">topo:</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">a)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">is&nbsp;</div><div class="code_nothing">0</div><br /><div class="code_grey">2:&nbsp;&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">a)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">1</div><br /><div class="code_grey">3:&nbsp;&nbsp;</div><div class="code_nothing">in&nbsp;</div><div class="code_nothing">ts:</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">b)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">is&nbsp;</div><div class="code_nothing">0</div><br /><div class="code_grey">4:&nbsp;&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">b)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">2</div><br /><div class="code_grey">5:&nbsp;&nbsp;</div><div class="code_nothing">in&nbsp;</div><div class="code_nothing">ts:</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">c)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">is&nbsp;</div><div class="code_nothing">0</div><br /><div class="code_grey">6:&nbsp;&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">c)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">3</div><br /><div class="code_grey">7:&nbsp;&nbsp;</div><div class="code_nothing">TSNum(</div><div class="code_nothing">c)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">1</div><br /><div class="code_grey">8:&nbsp;&nbsp;</div><div class="code_nothing">in&nbsp;</div><div class="code_nothing">ts:</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">d)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">is&nbsp;</div><div class="code_nothing">0</div><br /><div class="code_grey">9:&nbsp;&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">d)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">4</div><br /><div class="code_grey">10:&nbsp;</div><div class="code_nothing">TSNum(</div><div class="code_nothing">d)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">2</div><br /><div class="code_grey">11:&nbsp;</div><div class="code_nothing">in&nbsp;</div><div class="code_nothing">ts:</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">e)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">is&nbsp;</div><div class="code_nothing">0</div><br /><div class="code_grey">12:&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">e)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">5</div><br /><div class="code_grey">13:&nbsp;</div><div class="code_nothing">in&nbsp;</div><div class="code_nothing">ts:</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">f)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">is&nbsp;</div><div class="code_nothing">0</div><br /><div class="code_grey">14:&nbsp;</div><div class="code_nothing">num(</div><div class="code_nothing">f)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">6</div><br /><div class="code_grey">15:&nbsp;</div><div class="code_nothing">TSNum(</div><div class="code_nothing">f)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">3</div><br /><div class="code_grey">16:&nbsp;</div><div class="code_nothing">TSNum(</div><div class="code_nothing">e)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">4</div><br /><div class="code_grey">17:&nbsp;</div><div class="code_nothing">TSNum(</div><div class="code_nothing">b)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">5</div><br /><div class="code_grey">18:&nbsp;</div><div class="code_nothing">TSNum(</div><div class="code_nothing">a)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">6</div><br /><div class="code_grey">19:&nbsp;</div><div class="code_nothing">c&nbsp;</div><div class="code_nothing">has&nbsp;</div><div class="code_nothing">ts_num:</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">1</div><br /><div class="code_grey">20:&nbsp;</div><div class="code_nothing">d&nbsp;</div><div class="code_nothing">has&nbsp;</div><div class="code_nothing">ts_num:</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">2</div><br /><div class="code_grey">21:&nbsp;</div><div class="code_nothing">f&nbsp;</div><div class="code_nothing">has&nbsp;</div><div class="code_nothing">ts_num:</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">3</div><br /><div class="code_grey">22:&nbsp;</div><div class="code_nothing">e&nbsp;</div><div class="code_nothing">has&nbsp;</div><div class="code_nothing">ts_num:</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">4</div><br /><div class="code_grey">23:&nbsp;</div><div class="code_nothing">b&nbsp;</div><div class="code_nothing">has&nbsp;</div><div class="code_nothing">ts_num:</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">5</div><br /><div class="code_grey">24:&nbsp;</div><div class="code_nothing">a&nbsp;</div><div class="code_nothing">has&nbsp;</div><div class="code_nothing">ts_num:</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">6</div><br />        </div>
        </div>

      </div>
    </div>
  </body>
</html>
