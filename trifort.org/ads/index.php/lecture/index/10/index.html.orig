<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"> 
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>cse674 - advanced data strucures</title>
  <link href="/css/styles.css" rel="stylesheet" type="text/css"></link>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"></meta>
  <link rel="shortcut icon" href="/cse382/img/favicon2.ico" />
  </head>
  <body>
    <div class="page_block1">
      <div class="page_block2">
        <div class="section">
          <h1>10: multiway trees</h1>
          B-Trees | B*-Trees | Prefix B+-Trees | Bitmap Index | 2-3-4 Trees | Red Black Trees | C++ Sets and Maps<br />
          <br />
        </div>
        <div class="section">
        <h2>Multiway Search Trees</h2>
        Properties of a multiway search tree
        <ol>
          <li>Each node has <i>m</i> children and <i>m</i>-1 keys.</li>
          <li>The keys in each node are in ascending order</li>
          <li>The keys in the first <i>i</i>-1 children are smaller than the <i>i</i>th key.</li>
          <li>The keys in the last <i>m</i>-i-1 children are larger than the <i>i</i>th key.</li>
        </ol>
        Example of a multi-way tree:<br />
        <img src="/ads/img/pict/FourWayTree_0.bmp" alt="FourWayTree" /><br />
        </div>
        <div class="section">
        <h2>B-Trees</h2>
        A B-Tree is a multiway search tree that is designed to keep trees on hard disks.  Hard disks arranged into (usually) 512-byte blocks and keeping one key per block is slow.
        <ul>
          <li>access_time = seek_time + rotational_delay + transfer_time</li>
          <li>access_time = 40ms + 10ms + 5ms = 55ms</li>
          <li>Increasing the amount of data read by a little has a small effect on the time to do a random disk read.</li>
        </ul>
        A <i>B-Tree of order m</i> is a multiway search tree with the following properties:
        <ol>
          <li>The root has at least two subtress unless it is a leaf</li>
          <li>Each nonroot and each nonleaf node holds <i>k</i>-1 keys and <i>k</i> pointers to subtrees where ceiling(<i>m</i>/2)&lt;=<i>k</i>&lt;=<i>m</i></li>
          <li>Each leaf node holds <i>k</i>-1 keys where ceiling(<i>m</i>/2)&lt;=<i>k</i>&lt;=<i>m</i></li>
          <li>All leaves are on the same level</li>
        </ol>
        A B-Tree of order 5:<br />
        <img src="/ads/img/pict/BTree_0.bmp" alt="BTree" /><br />
        The order of a B-Tree in a database is determined by:
        <ul>
          <li>order = block_size / key_size</li>
        </ul>
        <h2>Searching in a B-Tree</h2>
        Searching in a B-Tree is fairly straightforward:
        <div class="code_block">
        <div class="code_grey">1:&nbsp;&nbsp;</div><div class="code_comment">// btreeSearch.cpp - download <a href="/ads/index.php/dlcode/index/btreeSearch.cpp">here</a></div><br /><div class="code_grey">2:&nbsp;&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">3:&nbsp;&nbsp;</div><div class="code_nothing">BTreeNode&nbsp;</div><div class="code_nothing">*&nbsp;</div><div class="code_nothing">btreeSearch(</div><div class="code_green">int</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">key,&nbsp;</div><div class="code_nothing">BTreeNode&nbsp;</div><div class="code_nothing">*&nbsp;</div><div class="code_nothing">curr)</div><div class="code_nothing">{</div><div class="code_nothing"></div><br /><div class="code_grey">4:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">if</div><div class="code_nothing">(</div><div class="code_nothing">curr&nbsp;</div><div class="code_nothing">!=</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">NULL)</div><div class="code_nothing">{</div><div class="code_nothing"></div><br /><div class="code_grey">5:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_green">int</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">i;</div><div class="code_nothing"></div><br /><div class="code_grey">6:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//seek&nbsp;the&nbsp;the&nbsp;closest&nbsp;key</div><br /><div class="code_grey">7:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">for</div><div class="code_nothing">(</div><div class="code_nothing">i&nbsp;</div><div class="code_nothing">=</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">0;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">i&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">curr-&gt;</div><div class="code_nothing">sizeKeys(</div><div class="code_nothing">)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&</div><div class="code_nothing">&</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">curr-&gt;</div><div class="code_nothing">getKey(</div><div class="code_nothing">i)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">key;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">++i)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">8:&nbsp;&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">9:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">if</div><div class="code_nothing">(</div><div class="code_nothing">i&nbsp;</div><div class="code_nothing">&gt;</div><div class="code_nothing">=</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">curr-&gt;</div><div class="code_nothing">sizeKeys(</div><div class="code_nothing">)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">||&nbsp;</div><div class="code_nothing">curr-&gt;</div><div class="code_nothing">getKey(</div><div class="code_nothing">i)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&gt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">key)</div><div class="code_nothing">{</div><div class="code_nothing"></div><br /><div class="code_grey">10:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//if&nbsp;the&nbsp;above&nbsp;for&nbsp;loop&nbsp;broke&nbsp;because&nbsp;the&nbsp;key&nbsp;was&nbsp;not&nbsp;found,&nbsp;recurse</div><br /><div class="code_grey">11:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">return</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">btreeSearch(</div><div class="code_nothing">key,&nbsp;</div><div class="code_nothing">curr-&gt;</div><div class="code_nothing">getPointer(</div><div class="code_nothing">i)</div><div class="code_nothing">)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">12:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">}</div><div class="code_nothing">&nbsp;</div><div class="code_red">else</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">{</div><div class="code_nothing"></div><br /><div class="code_grey">13:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//else&nbsp;we&nbsp;found&nbsp;the&nbsp;node</div><br /><div class="code_grey">14:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">return</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">curr;</div><div class="code_nothing"></div><br /><div class="code_grey">15:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">}</div><div class="code_nothing"></div><br /><div class="code_grey">16:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">}</div><div class="code_nothing">&nbsp;</div><div class="code_red">else</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">{</div><div class="code_nothing"></div><br /><div class="code_grey">17:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">return</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">NULL;</div><div class="code_nothing"></div><br /><div class="code_grey">18:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">}</div><div class="code_nothing"></div><br /><div class="code_grey">19:&nbsp;</div><div class="code_nothing">}</div><div class="code_nothing"></div><br />        </div>
        <h2>B-Tree Search Time Complexity</h2>
        Worst Case Searching:
        <ul>
          <li>Each node has the smallest allowable number of pointers (q = ceiling(m/2)).  (The number of keys is q-1)</li>
          <li>The number of keys per level follows a geometric progression
            <ul>
              <li>Root: 1 key</li>
              <li>Next level: (q-1) + (q-1) keys = 2(q-1) keys</li>
              <li>Next level: 2q(q-1) keys</li>
              <li>Next level: 2q^2(q-1) keys</li>
              <li>Leaves level: 2q^(h-1)*(q-1) keys<br /><br /></li>
            </ul>
          </li>
          <li>1 + <img src="/ads/img/math/lec12_01.png" alt="summation" /> * (q - 1) keys in the B-Tree<br /><br />
          </li>
          <li><img src="/ads/img/math/lec12_02.png" alt="summation2" /> = (q^(n+1) - 1) / (q - 1) (formula for the sum of the first n elements in a geometric progression)<br /><br /></li>
          <li>num_keys >= 1 + 2*(q-1) * <img src="/ads/img/math/lec12_03.png" alt="summation2" /> = 1 + 2 * (q - 1) * (q^(h-1) - 1) / (q - 1)<br /><br />
          </li>
          <li>num_keys >= -1 + 2q^(h-1)<br /><br /></li>
          <li>Solving for h.<br /><br /></li>
          <li>h <= log_q((n + 1)/2) + 1<br /><br /></li>
        </ul>
        For m = 200, n = 2,000,000, h <= 4. 
        For 2 million keys in a database, you need only four disk seeks. 
        If you keep the root block in ram, you need only three.
        <h2>Insertion in a B-Tree</h2>
        Given an incoming key, we go to the leaf and place it there, if there is room.  When the leaf is full, another leaf is created, keys are divided amoung leaves and one key is promoted to the parent.  If the parent is full, the process is repeated.<br />
        <br />
        There are three cases when inserting into a B-Tree
        <ol>
          <li>A key is placed in a leaf that still has room:<br /><br />
            <ol>
              <li>Start: <br />
                <img src="/ads/img/pict/BTreeInsert_0.bmp" alt="BTreeInsert" /></li>
              <li>Insert 7. (Needed to shift 8 over)<br />
                <img src="/ads/img/pict/BTreeInsert_1.bmp" alt="BTreeInsert" /></li>
            </ol>
          </li>
          <li>A key is to be placed in a leaf that is full:<br /><br />
            <ol>
              <li>Start: (Inserting 6)<br />
                <img src="/ads/img/pict/BTreeInsert_2.bmp" alt="BTreeInsert" /></li>
              <li>Create a new node by splitting the node where the insertion should occur.<br />
                <img src="/ads/img/pict/BTreeInsert_3.bmp" alt="BTreeInsert" /></li>
              <li>Place key at parent and shift other keys and pointers<br />
                <img src="/ads/img/pict/BTreeInsert_4.bmp" alt="BTreeInsert" /></li>
            </ol>
          </li>
          <li>A key is to be placed in tree that is full:<br /><br />
            <ol>
              <li>Start: (Inserting 13)<br />
                <img src="/ads/img/pict/BTreeInsert_5.bmp" alt="BTreeInsert" /></li>
              <li>Create a new node by splitting the node where the insertion should occur. Save off the 15.<br />
                <img src="/ads/img/pict/BTreeInsert_6.bmp" alt="BTreeInsert" /></li>
              <li>The 15 needs to go in the parent, but there is no room.  Split the parent.<br />
                <img src="/ads/img/pict/BTreeInsert_7.bmp" alt="BTreeInsert" /></li>
              <li>Insert the 15 above the two new nodes created.<br />
                <img src="/ads/img/pict/BTreeInsert_8.bmp" alt="BTreeInsert" /></li>
            </ol>
          </li>
        </ol>
        Algorithm:
        <div class="algorithm">
        <div class="code_grey">1:&nbsp;&nbsp;</div><div class="code_red">algorithm</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">btreeInsert(</div><div class="code_nothing">root,&nbsp;</div><div class="code_nothing">key)</div><div class="code_nothing"></div><br /><div class="code_grey">2:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">find&nbsp;</div><div class="code_nothing">a&nbsp;</div><div class="code_nothing">leaf&nbsp;</div><div class="code_nothing">node&nbsp;</div><div class="code_nothing">to&nbsp;</div><div class="code_nothing">insert&nbsp;</div><div class="code_nothing">key;</div><div class="code_nothing"></div><br /><div class="code_grey">3:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">while</div><div class="code_nothing">(</div><div class="code_nothing">true)</div><div class="code_nothing"></div><br /><div class="code_grey">4:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">find&nbsp;</div><div class="code_nothing">a&nbsp;</div><div class="code_nothing">proper&nbsp;</div><div class="code_nothing">position&nbsp;</div><div class="code_nothing">in&nbsp;</div><div class="code_nothing">array&nbsp;</div><div class="code_red">for</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">key;</div><div class="code_nothing"></div><br /><div class="code_grey">5:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">if</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">node&nbsp;</div><div class="code_nothing">is&nbsp;</div><div class="code_nothing">not&nbsp;</div><div class="code_nothing">full</div><br /><div class="code_grey">6:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">insert&nbsp;</div><div class="code_nothing">key&nbsp;</div><div class="code_nothing">in&nbsp;</div><div class="code_nothing">and&nbsp;</div><div class="code_nothing">shift&nbsp;</div><div class="code_nothing">other&nbsp;</div><div class="code_nothing">elements&nbsp;</div><div class="code_nothing">over;</div><div class="code_nothing"></div><br /><div class="code_grey">7:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">return</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">8:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">else</div><div class="code_nothing"></div><br /><div class="code_grey">9:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">split&nbsp;</div><div class="code_nothing">node&nbsp;</div><div class="code_nothing">into&nbsp;</div><div class="code_nothing">node1&nbsp;</div><div class="code_nothing">and&nbsp;</div><div class="code_nothing">node2;</div><div class="code_nothing"></div><br /><div class="code_grey">10:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">distribute&nbsp;</div><div class="code_nothing">keys&nbsp;</div><div class="code_nothing">and&nbsp;</div><div class="code_nothing">pointers&nbsp;</div><div class="code_nothing">evenly&nbsp;</div><div class="code_nothing">between&nbsp;</div><div class="code_nothing">node1&nbsp;</div><div class="code_nothing">and&nbsp;</div><div class="code_nothing">node2;</div><div class="code_nothing"></div><br /><div class="code_grey">11:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">if</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">node&nbsp;</div><div class="code_nothing">was&nbsp;</div><div class="code_nothing">the&nbsp;</div><div class="code_nothing">root</div><br /><div class="code_grey">12:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">create&nbsp;</div><div class="code_nothing">a&nbsp;</div><div class="code_red">new</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">root&nbsp;</div><div class="code_nothing">as&nbsp;</div><div class="code_nothing">parent&nbsp;</div><div class="code_nothing">of&nbsp;</div><div class="code_nothing">node1&nbsp;</div><div class="code_nothing">and&nbsp;</div><div class="code_nothing">node2;</div><div class="code_nothing"></div><br /><div class="code_grey">13:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">put&nbsp;</div><div class="code_nothing">the&nbsp;</div><div class="code_nothing">middle&nbsp;</div><div class="code_nothing">key&nbsp;</div><div class="code_nothing">from&nbsp;</div><div class="code_nothing">the&nbsp;</div><div class="code_nothing">split&nbsp;</div><div class="code_nothing">node&nbsp;</div><div class="code_nothing">in&nbsp;</div><div class="code_nothing">the&nbsp;</div><div class="code_nothing">root&nbsp;</div><div class="code_nothing">and&nbsp;</div><div class="code_nothing">set&nbsp;</div><div class="code_nothing">the&nbsp;</div><div class="code_nothing">pointers;</div><div class="code_nothing"></div><br /><div class="code_grey">14:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">return</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">15:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">else</div><div class="code_nothing"></div><br /><div class="code_grey">16:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">node&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">node's&nbsp;</div><div class="code_nothing">parent;</div><div class="code_nothing"></div><br />        </div>
        <h2>Deletion of a Key from a B-Tree</h2>
        Deletion is like insertion, but with more cases.  Care must be taken to ensure that nodes are never less than half full.
        <ol>
          <li>Start: <br />
            <img src="/ads/img/pict/BTreeDelete_0.bmp" alt="BTreeDelete" />
          </li>
          <li>Delete 6.  This is a simple remove and shift case in a leaf.<br />
            <img src="/ads/img/pict/BTreeDelete_1.bmp" alt="BTreeDelete" />
          </li>
          <li>Delete 7.  The number of keys in the leaf is less than half. Take the 8 from the parent and shift the 13 from the next sibling. This is okay because after the removal of 13, the next sibling is still half full<br />
            <img src="/ads/img/pict/BTreeDelete_2.bmp" alt="BTreeDelete" />
          </li>
          <li>Delete 8.
            <ol>
              <li>After removing 8, the leaf underflows. Take the 13 from the parent and the 14 and 15 from the next sibling to fill the leaf.<br />
                  <img src="/ads/img/pict/BTreeDelete_3.bmp" alt="BTreeDelete" />
              </li>
              <li>After doing this, the parent is less than half full.  A special case here is that we will be filling a root node that has only one key.
                  Create a new root from the parent, it's sibling and the old root.  The lowest levels in this diagram are kept the same.<br />
                  <img src="/ads/img/pict/BTreeDelete_4.bmp" alt="BTreeDelete" />
              </li>
            </ol>
          </li>
          <li>Delete 16.  Here we are deleting from a non-leaf.  The key to be deleted is replaced with it's immediate predecessor (which can only be found in a leaf).  The problem is then reduced to deleting a key from the leaf.<br />
            <img src="/ads/img/pict/BTreeDelete_5.bmp" alt="BTreeDelete" />
          </li>
        </ol>
        <div class="algorithm">
        <div class="code_grey">1:&nbsp;&nbsp;</div><div class="code_red">algorithm</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">btreeDelete(</div><div class="code_nothing">root,&nbsp;</div><div class="code_nothing">key)</div><div class="code_nothing"></div><br /><div class="code_grey">2:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">node&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">BTreeSearch(</div><div class="code_nothing">key,&nbsp;</div><div class="code_nothing">root)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">3:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">if</div><div class="code_nothing">(</div><div class="code_nothing">node&nbsp;</div><div class="code_nothing">==&nbsp;</div><div class="code_nothing">null)</div><div class="code_nothing"></div><br /><div class="code_grey">4:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">return</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">5:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">if</div><div class="code_nothing">(</div><div class="code_nothing">node&nbsp;</div><div class="code_nothing">is&nbsp;</div><div class="code_nothing">not&nbsp;</div><div class="code_nothing">a&nbsp;</div><div class="code_nothing">leaf)</div><div class="code_nothing"></div><br /><div class="code_grey">6:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">find&nbsp;</div><div class="code_nothing">a&nbsp;</div><div class="code_nothing">leaf&nbsp;</div><div class="code_nothing">with&nbsp;</div><div class="code_nothing">the&nbsp;</div><div class="code_nothing">closest&nbsp;</div><div class="code_nothing">predecessor&nbsp;</div><div class="code_nothing">S&nbsp;</div><div class="code_nothing">of&nbsp;</div><div class="code_nothing">key;</div><div class="code_nothing"></div><br /><div class="code_grey">7:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">copy&nbsp;</div><div class="code_nothing">S&nbsp;</div><div class="code_nothing">over&nbsp;</div><div class="code_nothing">key&nbsp;</div><div class="code_nothing">in&nbsp;</div><div class="code_nothing">node;</div><div class="code_nothing"></div><br /><div class="code_grey">8:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">node&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">the&nbsp;</div><div class="code_nothing">leaf&nbsp;</div><div class="code_nothing">containing&nbsp;</div><div class="code_nothing">S;</div><div class="code_nothing"></div><br /><div class="code_grey">9:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">remove&nbsp;</div><div class="code_nothing">S&nbsp;</div><div class="code_nothing">from&nbsp;</div><div class="code_nothing">node;</div><div class="code_nothing"></div><br /><div class="code_grey">10:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">else</div><div class="code_nothing"></div><br /><div class="code_grey">11:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">delete</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">key&nbsp;</div><div class="code_nothing">from&nbsp;</div><div class="code_nothing">node;</div><div class="code_nothing"></div><br /><div class="code_grey">12:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">while</div><div class="code_nothing">(</div><div class="code_nothing">true)</div><div class="code_nothing"></div><br /><div class="code_grey">13:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">if</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">node&nbsp;</div><div class="code_nothing">does&nbsp;</div><div class="code_nothing">not&nbsp;</div><div class="code_nothing">underflow</div><br /><div class="code_grey">14:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">return</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">15:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">else</div><div class="code_nothing">&nbsp;</div><div class="code_red">if</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">there&nbsp;</div><div class="code_nothing">is&nbsp;</div><div class="code_nothing">a&nbsp;</div><div class="code_nothing">sibling&nbsp;</div><div class="code_nothing">of&nbsp;</div><div class="code_nothing">node&nbsp;</div><div class="code_nothing">with&nbsp;</div><div class="code_nothing">enough&nbsp;</div><div class="code_nothing">keys</div><br /><div class="code_grey">16:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">redistribute&nbsp;</div><div class="code_nothing">keys&nbsp;</div><div class="code_nothing">between&nbsp;</div><div class="code_nothing">node&nbsp;</div><div class="code_nothing">and&nbsp;</div><div class="code_nothing">its&nbsp;</div><div class="code_nothing">sibling;</div><div class="code_nothing"></div><br /><div class="code_grey">17:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">return</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">18:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">else</div><div class="code_nothing">&nbsp;</div><div class="code_red">if</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">node's&nbsp;</div><div class="code_nothing">parent&nbsp;</div><div class="code_nothing">is&nbsp;</div><div class="code_nothing">the&nbsp;</div><div class="code_nothing">root</div><br /><div class="code_grey">19:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">if</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">the&nbsp;</div><div class="code_nothing">parent&nbsp;</div><div class="code_nothing">has&nbsp;</div><div class="code_nothing">only&nbsp;</div><div class="code_nothing">one&nbsp;</div><div class="code_nothing">key</div><br /><div class="code_grey">20:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">merge&nbsp;</div><div class="code_nothing">node,&nbsp;</div><div class="code_nothing">its&nbsp;</div><div class="code_nothing">sibling,&nbsp;</div><div class="code_nothing">and&nbsp;</div><div class="code_nothing">the&nbsp;</div><div class="code_nothing">parent&nbsp;</div><div class="code_nothing">to&nbsp;</div><div class="code_nothing">form&nbsp;</div><div class="code_nothing">a&nbsp;</div><div class="code_red">new</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">root;</div><div class="code_nothing"></div><br /><div class="code_grey">21:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">else</div><div class="code_nothing"></div><br /><div class="code_grey">22:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">merge&nbsp;</div><div class="code_nothing">node&nbsp;</div><div class="code_nothing">and&nbsp;</div><div class="code_nothing">its&nbsp;</div><div class="code_nothing">sibling;</div><div class="code_nothing"></div><br /><div class="code_grey">23:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">return</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">24:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">else</div><div class="code_nothing"></div><br /><div class="code_grey">25:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">merge&nbsp;</div><div class="code_nothing">node&nbsp;</div><div class="code_nothing">and&nbsp;</div><div class="code_nothing">its&nbsp;</div><div class="code_nothing">sibling;</div><div class="code_nothing"></div><br /><div class="code_grey">26:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">node&nbsp;</div><div class="code_nothing">=&nbsp;</div><div class="code_nothing">its&nbsp;</div><div class="code_nothing">parent;</div><div class="code_nothing"></div><br />        </div>
        </div>
        <div class="section">
        <h2>B*-Trees</h2>
        B*-Trees are a varient of B-Trees that was introduced by Donald Knuth and Douglas Comer.  In B*-Trees, all nodes (except the root) are required to be 2/3rds full, rather than half.
        <ul>
          <li>The frequency of node splitting is decreased by delaying a split. When a node is full, the keys in the full node are evenly distributed with a sibling.</li> 
          <li>A split occurs when two siblings are full and the nodes are split into three.</li>
          <li>The average utilization of B*-Trees was found to be 84% while B-Trees are approximately 69%</li>
        </ul>
        Splits in B*-Trees are delayed by attempting to redistribute keys among the node, its parent and its sibling
        <ol>
          <li>Start: <br />
            <img src="/ads/img/pict/BStarTree_0.bmp" alt="BStarTree" />
          </li>
          <li>Insert 6 and delay split by redistributing keys<br />
            <img src="/ads/img/pict/BStarTree_1.bmp" alt="BStarTree" />
          </li>
        </ol>
        If a node and its sibling are both full, a split is done and keys are distributed among three nodes
        <ol>
          <li>Start: <br />
            <img src="/ads/img/pict/BStarTree_2.bmp" alt="BStarTree" />
          </li>
          <li>Insert 4.  Split and redistribute among three nodes<br />
            <img src="/ads/img/pict/BStarTree_3.bmp" alt="BStarTree" />
          </li>
        </ol>
        </div>
        <div class="section">
        <h2>B+ Trees</h2>
        In B-Trees and B*-Trees, it is simple to write code to do an in-order traversal. However, if the blocks represent disk blocks, only one element from an internal node is accessed before switching to another disk block. This can be costly (time).
        <br />
        <br />
        In B+ Trees, the leaves contain all the keys in the tree (not just the leave keys) and the leaves have links forming a linked list.
        <img src="/ads/img/pict/BPlusTree_0.bmp" alt="BPlusTree" /><br />
        <br />
        Insertion and deletion in B+ Trees is similar to B and B* Trees.<br />
        <h3>Notes from Wikipedia [1]</h3>
        Systems using B+ Trees:
        <ol>
          <li>Filesystems:
            <ol>
              <li>NTFS</li>
              <li>NSS</li>
              <li>XFS</li>
              <li>JFS</li>
            </ol>
          </li>
          <li>Relational Databases:
            <ol>
              <li>IBM DB2</li>
              <li>Informix</li>
              <li>Microsoft SQL Server</li>
              <li>Oracle 8</li>
              <li>Sybase ASE</li>
              <li>SQLite</li>
            </ol>
          </li>
          <li>Key-value Databases:
            <ol>
              <li>CouchDB</li>
              <li>Tokyo Cabinet</li>
            </ol>
          </li>
        </ol>
        The keys in a node of B-Trees, B*-Trees and B+ Trees can be stored as Binary Search Trees instead of an array to speed deleting and adding elements [1]<br />
        <br />
        </div>
        <div class="section">
        <h2>Bitmap Index</h2>
        <b>Table:</b>
        <table class="nice_table">
          <tr class="grey">
            <td>Row</td>
            <td>Algorithm</td>
            <td>Worst Case Time Complexity</td>
          </tr>
          <tr>
            <td>0</td>
            <td>bubblesort</td>
            <td>O(n^2)</td>
          </tr>
          <tr>
            <td>1</td>
            <td>heapsort</td>
            <td>O(nlgn)</td>
          </tr>
          <tr>
            <td>2</td>
            <td>insertion sort</td>
            <td>O(n^2)</td>
          </tr>
          <tr>
            <td>3</td>
            <td>mergesort</td>
            <td>O(nlgn)</td>
          </tr>
          <tr>
            <td>4</td>
            <td>quicksort</td>
            <td>O(n^2)</td>
          </tr>
          <tr>
            <td>5</td>
            <td>selection sort</td>
            <td>O(n^2)</td>
          </tr>
          <tr>
            <td>6</td>
            <td>smooth sort</td>
            <td>O(n^2)</td>
          </tr>
        </table>
        <br />
        <b>Bitmap index:</b>
        <table class="nice_table">
          <tr>
            <td class="grey">Row</td>
            <td width="20px">0</td>
            <td width="20px">1</td>
            <td width="20px">2</td>
            <td width="20px">3</td>
            <td width="20px">4</td>
            <td width="20px">5</td>
            <td width="20px">6</td>
          </tr>
          <tr>
            <td class="grey">O(nlgn)</td>
            <td>0</td>
            <td>1</td>
            <td>0</td>
            <td>1</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
          </tr>
          <tr>
            <td class="grey">O(n^2)</td>
            <td>1</td>
            <td>0</td>
            <td>1</td>
            <td>0</td>
            <td>1</td>
            <td>1</td>
            <td>1</td>
          </tr>
        </table>
        <br />
        The index is kept in compressed format using a bitvector<br />
        <br />
        </div>
        <div class="section">
        <h2>2-3-4 Trees [2]</h2>
        A <b>2-3-4 search tree</b> is a tree that either is empty or has three types of nodes:
        <ol>
          <li><b>2-nodes</b>: with one key and two pointers</li>
          <li><b>3-nodes</b>: with two keys and three pointers</li>
          <li><b>4-nodes</b>: with three keys and four pointers</li>
        </ol>
        A <b>balanced 2-3-4 search tree</b> is a 2-3-4 search tree with all links to empty trees at the same distance from the root.<br />
        <h3>Insertion</h3>
        There are three primary cases for insertion into 2-3-4 Trees:
        <ol>
          <li>Search Terminates on a 2-node:
            <ol>
              <li>Start: <br />
                <img src="/ads/img/pict/TwoThreeFourTree_0.bmp" alt="234Tree" />
              </li>
              <li>Insert 23. Make 2-node into a 3-node<br />
                <img src="/ads/img/pict/TwoThreeFourTree_1.bmp" alt="234Tree" />
              </li>
            </ol>
          </li>
          <li>Search Terminates on a 3-node:
            <ol>
              <li>Start: <br />
                <img src="/ads/img/pict/TwoThreeFourTree_1.bmp" alt="234Tree" />
              </li>
              <li>Insert 13. Make 3-node into a 4-node<br />
                <img src="/ads/img/pict/TwoThreeFourTree_2.bmp" alt="234Tree" />
              </li>
            </ol>
          </li>
          <li>Search Terminates on a 4-node:
            <ol>
              <li>Start: <br />
                <img src="/ads/img/pict/TwoThreeFourTree_3.bmp" alt="234Tree" />
              </li>
              <li>Insert 6. Split the 4 node according to the B-Tree rules.<br />
                <img src="/ads/img/pict/TwoThreeFourTree_4.bmp" alt="234Tree" />
              </li>
              <li>Special Case: The root has become a 4-node.  Split it into a triangle of 2-nodes.  This is the only case where the tree height grows by one.<br />
                <img src="/ads/img/pict/TwoThreeFourTree_5.bmp" alt="234Tree" />
              </li>
            </ol>
          </li>
        </ol>
        <h3>2-3-4 Tree Time Complexities</h3>
        <ul>
          <li><b>Search: </b>O(log n)</li>
          <li><b>Insert: </b>O(log n)</li>
          <li><b>Delete: </b>O(log n)</li>
        </ul>
        </div>
        <div class="section">
        <h2>Red-Black Trees [1]</h2>
        2-3-4 Trees provide O(log n) performance for insertion, delete and search. However they can
        be hard to implement.<br />
        <br />
        Red-Black Trees use standard 2-nodes but add one extra bit of information. Links can be either red or black.
        <ul>
          <li><b>2-nodes</b>: represented by one 2-node connected by a single <b>black link</b></li>
          <li><b>3-nodes</b>: represented by two 2-nodes connected by a single <b>red link</b></li>
          <li><b>4-nodes</b>: represented by three 2-nodes connected by <b>red links</b></li>
        </ul>
        2-3-4 Tree:<br />
        <img src="/ads/img/pict/RedBlackDemo_0.bmp" alt="RedBlackDemo" /><br />
        <br />
        Corresponding Red-Black Tree:<br />
        <img src="/ads/img/pict/RedBlackDemo_1.bmp" alt="RedBlackDemo" /><br />
        <br />
        Requirements of Red-Black Trees [2]
        <ol>
          <li>The root is black</li>
          <li>Two red nodes cannot exist in a row</li>
        </ol>
        Red-Black Tree Strengths:
        <ul>
          <li>Search takes no additional time over a regular binary tree search. The color is never examined and there is no rebalancing on search</li>
          <li>Insertion only needs rebalancing when we see 4-nodes</li>
        </ul>
        <h3>Insertion</h3>
        <ol>
          <li>Inserting into a 2-node with a 1-node as a parent
            <ol>
              <li>Start: <br />
                <img src="/ads/img/pict/RedBlackInsert_0.bmp" alt="RedBlackInsert" />  
              </li>
              <li>Insert 18 <br />
                <img src="/ads/img/pict/RedBlackInsert_1.bmp" alt="RedBlackInsert" />  
              </li>      
              <li>Push the red links up to the parent <br />
                <img src="/ads/img/pict/RedBlackInsert_2.bmp" alt="RedBlackInsert" />  
              </li>
            </ol>
          </li>

          <li>Simple insertion into a 2-node with a 2-node as a parent
            <ol>
              <li>Start: <br />
                <img src="/ads/img/pict/RedBlackInsert_3.bmp" alt="RedBlackInsert" />  
              </li>
              <li>Insert 18 <br />
                <img src="/ads/img/pict/RedBlackInsert_4.bmp" alt="RedBlackInsert" />  
              </li>      
              <li>Push the red links up to the parent <br />
                <img src="/ads/img/pict/RedBlackInsert_5.bmp" alt="RedBlackInsert" />  
              </li>
            </ol>
          </li>

          <li>Single Rotation insertion into a 2-node with a 2-node as a parent
            <ol>
              <li>Start: <br />
                <img src="/ads/img/pict/RedBlackInsert_6.bmp" alt="RedBlackInsert" />  
              </li>
              <li>Insert 7 <br />
                <img src="/ads/img/pict/RedBlackInsert_7.bmp" alt="RedBlackInsert" />  
              </li>      
              <li>Push the red links up to the parent<br />
                <img src="/ads/img/pict/RedBlackInsert_8.bmp" alt="RedBlackInsert" />  
              </li>   
              <li>Two red links are in a row. Both links are left links, do a single right rotation about 8.<br />
                <img src="/ads/img/pict/RedBlackInsert_9.bmp" alt="RedBlackInsert" />  
              </li>
            </ol>
          </li>

          <li>Double Rotation insertion into a 2-node with a 2-node as a parent
            <ol>
              <li>Start: <br />
                <img src="/ads/img/pict/RedBlackInsert_10.bmp" alt="RedBlackInsert" />  
              </li>
              <li>Insert 8<br />
                <img src="/ads/img/pict/RedBlackInsert_11.bmp" alt="RedBlackInsert" />  
              </li>      
              <li>Push the red links up to the parent<br />
                <img src="/ads/img/pict/RedBlackInsert_12.bmp" alt="RedBlackInsert" />  
              </li>   
              <li>Two red links are in a row. One link is left and another is right. First do a left rotation about 5.<br />
                <img src="/ads/img/pict/RedBlackInsert_13.bmp" alt="RedBlackInsert" />  
              </li>
              <li>Then do a right rotation around 9.<br />
                <img src="/ads/img/pict/RedBlackInsert_14.bmp" alt="RedBlackInsert" />  
              </li>
            </ol>
          </li>
        </ol>
        </div>
        <div class="section">
        <h2>C++ Sets, Multisets</h2>
        Sets are implemented as Binary Search Trees.  Sets cannot have duplicate keys.  Multisets can have duplicate keys.
        <br />
        <br />
        Set Code: 
        <div class="code_block">
        <div class="code_grey">1:&nbsp;&nbsp;</div><div class="code_comment">// cppSetExample.cpp - download <a href="/ads/index.php/dlcode/index/cppSetExample.cpp">here</a></div><br /><div class="code_grey">2:&nbsp;&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">3:&nbsp;&nbsp;</div><div class="code_preproc">#include</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">iostream&gt;</div><div class="code_nothing"></div><br /><div class="code_grey">4:&nbsp;&nbsp;</div><div class="code_preproc">#include</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">set&gt;</div><div class="code_nothing"></div><br /><div class="code_grey">5:&nbsp;&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">6:&nbsp;&nbsp;</div><div class="code_green">int</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">main(</div><div class="code_green">int</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">argc,&nbsp;</div><div class="code_green">char</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">*&nbsp;</div><div class="code_nothing">argv[</div><div class="code_nothing">]</div><div class="code_nothing">)</div><div class="code_nothing">{</div><div class="code_nothing"></div><br /><div class="code_grey">7:&nbsp;&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">8:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">set&lt;</div><div class="code_green">int</div><div class="code_nothing">&gt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">set1;</div><div class="code_nothing"></div><br /><div class="code_grey">9:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">set1.insert(</div><div class="code_nothing">20)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">10:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">set1.insert(</div><div class="code_nothing">10)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">11:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">set1.insert(</div><div class="code_nothing">50)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">12:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">set1.insert(</div><div class="code_nothing">23)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">13:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">set1.insert(</div><div class="code_nothing">20)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">14:&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">15:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">set&lt;</div><div class="code_green">int</div><div class="code_nothing">&gt;</div><div class="code_nothing">:</div><div class="code_nothing">:</div><div class="code_nothing">iterator&nbsp;</div><div class="code_nothing">iter;</div><div class="code_nothing"></div><br /><div class="code_grey">16:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">cout&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_string">"items&nbsp;in&nbsp;set1:&nbsp;"</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">endl;</div><div class="code_nothing"></div><br /><div class="code_grey">17:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">for</div><div class="code_nothing">(</div><div class="code_nothing">iter&nbsp;</div><div class="code_nothing">=</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">set1.begin(</div><div class="code_nothing">)</div><div class="code_nothing">;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">iter&nbsp;</div><div class="code_nothing">!=</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">set1.end(</div><div class="code_nothing">)</div><div class="code_nothing">;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">++iter)</div><div class="code_nothing">{</div><div class="code_nothing"></div><br /><div class="code_grey">18:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">cout&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_string">"&nbsp;&nbsp;"</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">*iter&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">endl;</div><div class="code_nothing"></div><br /><div class="code_grey">19:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">}</div><div class="code_nothing"></div><br /><div class="code_grey">20:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//prints:</div><br /><div class="code_grey">21:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//&nbsp;&nbsp;items&nbsp;in&nbsp;set1:</div><br /><div class="code_grey">22:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//&nbsp;&nbsp;&nbsp;&nbsp;10</div><br /><div class="code_grey">23:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//&nbsp;&nbsp;&nbsp;&nbsp;20</div><br /><div class="code_grey">24:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//&nbsp;&nbsp;&nbsp;&nbsp;23</div><br /><div class="code_grey">25:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//&nbsp;&nbsp;&nbsp;&nbsp;50</div><br /><div class="code_grey">26:&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">27:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">return</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">0;</div><div class="code_nothing"></div><br /><div class="code_grey">28:&nbsp;</div><div class="code_nothing">}</div><div class="code_nothing"></div><br />        </div>
        <br />
        Multiset Code: 
        <div class="code_block">
        <div class="code_grey">1:&nbsp;&nbsp;</div><div class="code_comment">// cppMultisetExample.cpp - download <a href="/ads/index.php/dlcode/index/cppMultisetExample.cpp">here</a></div><br /><div class="code_grey">2:&nbsp;&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">3:&nbsp;&nbsp;</div><div class="code_preproc">#include</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">iostream&gt;</div><div class="code_nothing"></div><br /><div class="code_grey">4:&nbsp;&nbsp;</div><div class="code_preproc">#include</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">set&gt;</div><div class="code_nothing"></div><br /><div class="code_grey">5:&nbsp;&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">6:&nbsp;&nbsp;</div><div class="code_green">int</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">main(</div><div class="code_green">int</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">argc,&nbsp;</div><div class="code_green">char</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">*&nbsp;</div><div class="code_nothing">argv[</div><div class="code_nothing">]</div><div class="code_nothing">)</div><div class="code_nothing">{</div><div class="code_nothing"></div><br /><div class="code_grey">7:&nbsp;&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">8:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">multiset&lt;</div><div class="code_green">int</div><div class="code_nothing">&gt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">mset1;</div><div class="code_nothing"></div><br /><div class="code_grey">9:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">mset1.insert(</div><div class="code_nothing">20)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">10:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">mset1.insert(</div><div class="code_nothing">10)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">11:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">mset1.insert(</div><div class="code_nothing">50)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">12:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">mset1.insert(</div><div class="code_nothing">23)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">13:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">mset1.insert(</div><div class="code_nothing">20)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">14:&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">15:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">multiset&lt;</div><div class="code_green">int</div><div class="code_nothing">&gt;</div><div class="code_nothing">:</div><div class="code_nothing">:</div><div class="code_nothing">iterator&nbsp;</div><div class="code_nothing">iter;</div><div class="code_nothing"></div><br /><div class="code_grey">16:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">cout&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_string">"items&nbsp;in&nbsp;mset1:&nbsp;"</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">endl;</div><div class="code_nothing"></div><br /><div class="code_grey">17:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">for</div><div class="code_nothing">(</div><div class="code_nothing">iter&nbsp;</div><div class="code_nothing">=</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">mset1.begin(</div><div class="code_nothing">)</div><div class="code_nothing">;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">iter&nbsp;</div><div class="code_nothing">!=</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">mset1.end(</div><div class="code_nothing">)</div><div class="code_nothing">;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">++iter)</div><div class="code_nothing">{</div><div class="code_nothing"></div><br /><div class="code_grey">18:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">cout&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_string">"&nbsp;&nbsp;"</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">*iter&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">endl;</div><div class="code_nothing"></div><br /><div class="code_grey">19:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">}</div><div class="code_nothing"></div><br /><div class="code_grey">20:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//prints:</div><br /><div class="code_grey">21:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//&nbsp;&nbsp;items&nbsp;in&nbsp;mset1:</div><br /><div class="code_grey">22:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//&nbsp;&nbsp;&nbsp;&nbsp;10</div><br /><div class="code_grey">23:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//&nbsp;&nbsp;&nbsp;&nbsp;20</div><br /><div class="code_grey">24:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//&nbsp;&nbsp;&nbsp;&nbsp;20</div><br /><div class="code_grey">25:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//&nbsp;&nbsp;&nbsp;&nbsp;23</div><br /><div class="code_grey">26:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//&nbsp;&nbsp;&nbsp;&nbsp;50</div><br /><div class="code_grey">27:&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">28:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">return</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">0;</div><div class="code_nothing"></div><br /><div class="code_grey">29:&nbsp;</div><div class="code_nothing">}</div><div class="code_nothing"></div><br />        </div>
        </div>
        <div class="section">
        <h2>C++ Maps, Multimaps</h2>
        Maps are Binary Search Trees with keys that also hold on to values. Maps cannot have duplicate keys, Multimaps can.
        <br />
        <br />
        Map Code:
        <div class="code_block">
        <div class="code_grey">1:&nbsp;&nbsp;</div><div class="code_comment">// cppMapExample.cpp - download <a href="/ads/index.php/dlcode/index/cppMapExample.cpp">here</a></div><br /><div class="code_grey">2:&nbsp;&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">3:&nbsp;&nbsp;</div><div class="code_preproc">#include</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">iostream&gt;</div><div class="code_nothing"></div><br /><div class="code_grey">4:&nbsp;&nbsp;</div><div class="code_preproc">#include</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">map&gt;</div><div class="code_nothing"></div><br /><div class="code_grey">5:&nbsp;&nbsp;</div><div class="code_preproc">#include</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">string&gt;</div><div class="code_nothing"></div><br /><div class="code_grey">6:&nbsp;&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">7:&nbsp;&nbsp;</div><div class="code_green">int</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">main(</div><div class="code_green">int</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">argc,&nbsp;</div><div class="code_green">char</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">*argv[</div><div class="code_nothing">]</div><div class="code_nothing">)</div><div class="code_nothing">{</div><div class="code_nothing"></div><br /><div class="code_grey">8:&nbsp;&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">9:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">map&lt;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">string,&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">string&gt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">dictionary;</div><div class="code_nothing"></div><br /><div class="code_grey">10:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">dictionary[</div><div class="code_string">"array"</div><div class="code_nothing">]</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=</div><div class="code_nothing">&nbsp;</div><div class="code_string">"a&nbsp;systematic&nbsp;arrangement&nbsp;of&nbsp;objects,&nbsp;usually&nbsp;in&nbsp;rows&nbsp;and&nbsp;columns"</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">11:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">dictionary[</div><div class="code_string">"vector"</div><div class="code_nothing">]</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=</div><div class="code_nothing">&nbsp;</div><div class="code_string">"an&nbsp;automatically&nbsp;resizable&nbsp;array"</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">12:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">dictionary[</div><div class="code_string">"queue"</div><div class="code_nothing">]</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=</div><div class="code_nothing">&nbsp;</div><div class="code_string">"a&nbsp;container&nbsp;where&nbsp;the&nbsp;next&nbsp;element&nbsp;is&nbsp;given&nbsp;in&nbsp;FIFO&nbsp;order"</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">13:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">dictionary[</div><div class="code_string">"stack"</div><div class="code_nothing">]</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">=</div><div class="code_nothing">&nbsp;</div><div class="code_string">"a&nbsp;container&nbsp;where&nbsp;the&nbsp;next&nbsp;element&nbsp;is&nbsp;given&nbsp;in&nbsp;LIFO&nbsp;order"</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">14:&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">15:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">cout&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_string">"an&nbsp;array&nbsp;is:&nbsp;"</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">dictionary[</div><div class="code_string">"array"</div><div class="code_nothing">]</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">endl;</div><div class="code_nothing"></div><br /><div class="code_grey">16:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">cout&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">endl;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">17:&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">18:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">cout&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_string">"the&nbsp;dictionary&nbsp;contents:&nbsp;"</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">endl;</div><div class="code_nothing"></div><br /><div class="code_grey">19:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">map&lt;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">string,&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">string&gt;</div><div class="code_nothing">:</div><div class="code_nothing">:</div><div class="code_nothing">iterator&nbsp;</div><div class="code_nothing">iter;</div><div class="code_nothing"></div><br /><div class="code_grey">20:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">for</div><div class="code_nothing">(</div><div class="code_nothing">iter&nbsp;</div><div class="code_nothing">=</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">dictionary.begin(</div><div class="code_nothing">)</div><div class="code_nothing">;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">iter&nbsp;</div><div class="code_nothing">!=</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">dictionary.end(</div><div class="code_nothing">)</div><div class="code_nothing">;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">++iter)</div><div class="code_nothing">{</div><div class="code_nothing"></div><br /><div class="code_grey">21:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">pair&lt;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">string,&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">string&gt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">item&nbsp;</div><div class="code_nothing">=</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">*iter;</div><div class="code_nothing"></div><br /><div class="code_grey">22:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">cout&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">item.first&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_string">":&nbsp;"</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">item.second&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">endl;</div><div class="code_nothing"></div><br /><div class="code_grey">23:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">}</div><div class="code_nothing"></div><br /><div class="code_grey">24:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">cout&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">endl;</div><div class="code_nothing"></div><br /><div class="code_grey">25:&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">26:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">dictionary.erase(</div><div class="code_string">"array"</div><div class="code_nothing">)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">27:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">cout&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_string">"after&nbsp;erasing&nbsp;'array',&nbsp;"</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">28:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">if</div><div class="code_nothing">(</div><div class="code_nothing">dictionary.find(</div><div class="code_string">"array"</div><div class="code_nothing">)</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">!=</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">dictionary.end(</div><div class="code_nothing">)</div><div class="code_nothing">)</div><div class="code_nothing">{</div><div class="code_nothing"></div><br /><div class="code_grey">29:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">cout&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_string">"dictionary&nbsp;contains&nbsp;array"</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">endl;</div><div class="code_nothing"></div><br /><div class="code_grey">30:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">}</div><div class="code_nothing">&nbsp;</div><div class="code_red">else</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">{</div><div class="code_nothing"></div><br /><div class="code_grey">31:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">cout&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_string">"dictionary&nbsp;does&nbsp;not&nbsp;contain&nbsp;array"</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">endl;</div><div class="code_nothing"></div><br /><div class="code_grey">32:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">}</div><div class="code_nothing"></div><br /><div class="code_grey">33:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">34:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//prints:</div><br /><div class="code_grey">35:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//&nbsp;&nbsp;an&nbsp;array&nbsp;is:&nbsp;a&nbsp;systematic&nbsp;arrangement&nbsp;of&nbsp;objects,&nbsp;usually&nbsp;in&nbsp;rows&nbsp;and&nbsp;columns</div><br /><div class="code_grey">36:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//</div><br /><div class="code_grey">37:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//&nbsp;&nbsp;the&nbsp;dictionary&nbsp;contents:&nbsp;</div><br /><div class="code_grey">38:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//&nbsp;&nbsp;array:&nbsp;a&nbsp;systematic&nbsp;arrangement&nbsp;of&nbsp;objects,&nbsp;usually&nbsp;in&nbsp;rows&nbsp;and&nbsp;columns</div><br /><div class="code_grey">39:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//&nbsp;&nbsp;queue:&nbsp;a&nbsp;container&nbsp;where&nbsp;the&nbsp;next&nbsp;element&nbsp;is&nbsp;given&nbsp;in&nbsp;FIFO&nbsp;order</div><br /><div class="code_grey">40:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//&nbsp;&nbsp;stack:&nbsp;a&nbsp;container&nbsp;where&nbsp;the&nbsp;next&nbsp;element&nbsp;is&nbsp;given&nbsp;in&nbsp;LIFO&nbsp;order</div><br /><div class="code_grey">41:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//&nbsp;&nbsp;vector:&nbsp;an&nbsp;automatically&nbsp;resizable&nbsp;array</div><br /><div class="code_grey">42:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//</div><br /><div class="code_grey">43:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//&nbsp;&nbsp;after&nbsp;erasing&nbsp;'array',&nbsp;dictionary&nbsp;does&nbsp;not&nbsp;contain&nbsp;array</div><br /><div class="code_grey">44:&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">45:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">return</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">0;</div><div class="code_nothing"></div><br /><div class="code_grey">46:&nbsp;</div><div class="code_nothing">}</div><div class="code_nothing"></div><br /><div class="code_grey">47:&nbsp;</div><div class="code_nothing"></div><br />        </div>
        <br />
        Multimap Code: 
        <div class="code_block">
        <div class="code_grey">1:&nbsp;&nbsp;</div><div class="code_comment">// cppMultimapExample.cpp - download <a href="/ads/index.php/dlcode/index/cppMultimapExample.cpp">here</a></div><br /><div class="code_grey">2:&nbsp;&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">3:&nbsp;&nbsp;</div><div class="code_preproc">#include</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">iostream&gt;</div><div class="code_nothing"></div><br /><div class="code_grey">4:&nbsp;&nbsp;</div><div class="code_preproc">#include</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">map&gt;</div><div class="code_nothing"></div><br /><div class="code_grey">5:&nbsp;&nbsp;</div><div class="code_preproc">#include</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">string&gt;</div><div class="code_nothing"></div><br /><div class="code_grey">6:&nbsp;&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">7:&nbsp;&nbsp;</div><div class="code_green">int</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">main(</div><div class="code_green">int</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">argc,&nbsp;</div><div class="code_green">char</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">*argv[</div><div class="code_nothing">]</div><div class="code_nothing">)</div><div class="code_nothing">{</div><div class="code_nothing"></div><br /><div class="code_grey">8:&nbsp;&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">9:&nbsp;&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">multimap&lt;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">string,&nbsp;</div><div class="code_green">int</div><div class="code_nothing">&gt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">course_catalog;</div><div class="code_nothing"></div><br /><div class="code_grey">10:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">course_catalog.insert(</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">pair&lt;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">string,&nbsp;</div><div class="code_green">int</div><div class="code_nothing">&gt;</div><div class="code_nothing">(</div><div class="code_string">"cis"</div><div class="code_nothing">,&nbsp;</div><div class="code_nothing">252)</div><div class="code_nothing">)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">11:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">course_catalog.insert(</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">pair&lt;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">string,&nbsp;</div><div class="code_green">int</div><div class="code_nothing">&gt;</div><div class="code_nothing">(</div><div class="code_string">"cis"</div><div class="code_nothing">,&nbsp;</div><div class="code_nothing">275)</div><div class="code_nothing">)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">12:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">course_catalog.insert(</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">pair&lt;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">string,&nbsp;</div><div class="code_green">int</div><div class="code_nothing">&gt;</div><div class="code_nothing">(</div><div class="code_string">"cis"</div><div class="code_nothing">,&nbsp;</div><div class="code_nothing">300)</div><div class="code_nothing">)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">13:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">course_catalog.insert(</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">pair&lt;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">string,&nbsp;</div><div class="code_green">int</div><div class="code_nothing">&gt;</div><div class="code_nothing">(</div><div class="code_string">"cse"</div><div class="code_nothing">,&nbsp;</div><div class="code_nothing">283)</div><div class="code_nothing">)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">14:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">course_catalog.insert(</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">pair&lt;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">string,&nbsp;</div><div class="code_green">int</div><div class="code_nothing">&gt;</div><div class="code_nothing">(</div><div class="code_string">"cse"</div><div class="code_nothing">,&nbsp;</div><div class="code_nothing">382)</div><div class="code_nothing">)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">15:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">course_catalog.insert(</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">pair&lt;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">string,&nbsp;</div><div class="code_green">int</div><div class="code_nothing">&gt;</div><div class="code_nothing">(</div><div class="code_string">"cse"</div><div class="code_nothing">,&nbsp;</div><div class="code_nothing">484)</div><div class="code_nothing">)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">16:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">course_catalog.insert(</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">pair&lt;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">string,&nbsp;</div><div class="code_green">int</div><div class="code_nothing">&gt;</div><div class="code_nothing">(</div><div class="code_string">"ele"</div><div class="code_nothing">,&nbsp;</div><div class="code_nothing">231)</div><div class="code_nothing">)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">17:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">course_catalog.insert(</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">pair&lt;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">string,&nbsp;</div><div class="code_green">int</div><div class="code_nothing">&gt;</div><div class="code_nothing">(</div><div class="code_string">"ele"</div><div class="code_nothing">,&nbsp;</div><div class="code_nothing">232)</div><div class="code_nothing">)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">18:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">course_catalog.insert(</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">pair&lt;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">string,&nbsp;</div><div class="code_green">int</div><div class="code_nothing">&gt;</div><div class="code_nothing">(</div><div class="code_string">"ele"</div><div class="code_nothing">,&nbsp;</div><div class="code_nothing">312)</div><div class="code_nothing">)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">19:&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">20:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">multimap&lt;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">string,&nbsp;</div><div class="code_green">int</div><div class="code_nothing">&gt;</div><div class="code_nothing">:</div><div class="code_nothing">:</div><div class="code_nothing">iterator&nbsp;</div><div class="code_nothing">iter;</div><div class="code_nothing"></div><br /><div class="code_grey">21:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">iter&nbsp;</div><div class="code_nothing">=</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">course_catalog.find(</div><div class="code_string">"cse"</div><div class="code_nothing">)</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">22:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">cout&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_string">"courses&nbsp;in&nbsp;cse:&nbsp;"</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">endl;</div><div class="code_nothing"></div><br /><div class="code_grey">23:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">while</div><div class="code_nothing">(</div><div class="code_nothing">true)</div><div class="code_nothing">{</div><div class="code_nothing"></div><br /><div class="code_grey">24:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">pair&lt;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">string,&nbsp;</div><div class="code_green">int</div><div class="code_nothing">&gt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">item&nbsp;</div><div class="code_nothing">=</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">*iter;</div><div class="code_nothing"></div><br /><div class="code_grey">25:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">if</div><div class="code_nothing">(</div><div class="code_nothing">item.first&nbsp;</div><div class="code_nothing">=</div><div class="code_nothing">=</div><div class="code_nothing">&nbsp;</div><div class="code_string">"cse"</div><div class="code_nothing">)</div><div class="code_nothing">{</div><div class="code_nothing"></div><br /><div class="code_grey">26:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">cout&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">item.first&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">item.second&nbsp;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&lt;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">std:</div><div class="code_nothing">:</div><div class="code_nothing">endl;</div><div class="code_nothing"></div><br /><div class="code_grey">27:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">++iter;</div><div class="code_nothing"></div><br /><div class="code_grey">28:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">}</div><div class="code_nothing">&nbsp;</div><div class="code_red">else</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">{</div><div class="code_nothing"></div><br /><div class="code_grey">29:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">break</div><div class="code_nothing">;</div><div class="code_nothing"></div><br /><div class="code_grey">30:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">}</div><div class="code_nothing"></div><br /><div class="code_grey">31:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">}</div><div class="code_nothing"></div><br /><div class="code_grey">32:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">33:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//prints:</div><br /><div class="code_grey">34:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//&nbsp;&nbsp;courses&nbsp;in&nbsp;cse:</div><br /><div class="code_grey">35:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//&nbsp;&nbsp;cse283</div><br /><div class="code_grey">36:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//&nbsp;&nbsp;cse382</div><br /><div class="code_grey">37:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_comment">//&nbsp;&nbsp;cse484</div><br /><div class="code_grey">38:&nbsp;</div><div class="code_nothing"></div><br /><div class="code_grey">39:&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">&nbsp;</div><div class="code_red">return</div><div class="code_nothing">&nbsp;</div><div class="code_nothing">0;</div><div class="code_nothing"></div><br /><div class="code_grey">40:&nbsp;</div><div class="code_nothing">}</div><div class="code_nothing"></div><br /><div class="code_grey">41:&nbsp;</div><div class="code_nothing"></div><br /></div>
</div>
        <div class="section">
        <h2>References</h2>
        <ol>
          <li>http://en.wikipedia.org/wiki/B_plus_tree</li>
          <li>Robert Sedgewick, "Algorithms in C++, Parts 1-4", Third Edition. ISBN: 0-201-35088-2, pages 560-573</li>
        </ol>
        </div>
      </div>
    </div>
  </body>
</html>
